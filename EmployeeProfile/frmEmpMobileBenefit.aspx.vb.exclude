Imports System.Data

Partial Class EmployeeProfile_frmEmpMobileBenefit
    Inherits System.Web.UI.Page

    Dim MobileBenefitData As New clsMobileBenefitDataAccess()
    Dim InsuranceInfoData As New clsInsuranceInfoDataAccess()
    Dim AbatementRaioData As New clsAbatementRatioDataAccess()
    Dim AmortizationData As New clsLoanAmortizationData()
    Dim EmpLoanData As New clsEmpLoanAccountDataAccess()
    Dim EmployeeData As New clsEmpBasicProfileDataAccess()

    Dim TotalPayment As Double = 0
    Dim TotalPrinciplePayment As Double = 0
    Dim TotalIntPayment As Double = 0
    Dim TotalAbatement As Double = 0

    Protected Sub btnInsertAddMobile_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnInsertAddMobile.Click
        Dim folder As String
        Dim DocFileName As String = ""
        Dim DocFileNameSign As String = ""
        Dim DocExt As String = ""
        Dim AttachmentFileName As String = ""
        Dim DocPrefix As String
        Dim FileSize As Integer
        Dim ToWhomProShow As String = Session("ToWhomProShow")
        Dim MobileBenefit As New clsMobileBenefit()

        MobileBenefit.MobileBenefitID = hdFldMobileBenefitID.Value
        MobileBenefit.EmployeeID = ToWhomProShow
        MobileBenefit.IMEINo = txtIMEINo.Text
        MobileBenefit.Brand = drpMobileBrand.SelectedValue
        MobileBenefit.ModelNo = txtModelNo.Text
        MobileBenefit.MobileCost = txtMobileCost.Text
        MobileBenefit.SIMNo = txtSIMNo.Text

        If Trim(txtDateOfPurchase.Text) = "" Then
            MobileBenefit.DateOfPurchse = "1/1/1900"
        Else
            MobileBenefit.DateOfPurchse = Convert.ToDateTime(txtDateOfPurchase.Text)
        End If

        MobileBenefit.RemarksOnMobile = txtRemarksForMobile.Text

        If txtMobileSetReimDate.Text = "" Then
            MobileBenefit.DateOfReimbursement = "1/1/1900"
        Else
            MobileBenefit.DateOfReimbursement = Convert.ToDateTime(txtMobileSetReimDate.Text)
        End If

        folder = Server.MapPath("~/Attachments/")

        If flUpMobileAttachment.HasFile Then

            FileSize = flUpMobileAttachment.PostedFile.ContentLength()

            If FileSize > 10485760 Then
                MessageBox("File size should be within 10MB")
                Exit Sub
            End If

            DocPrefix = Title.Replace(" ", "")
            DocExt = System.IO.Path.GetExtension(flUpMobileAttachment.FileName)
            DocFileName = "Mobile" & "_" & DateTime.Now.ToString("ddMMyyHHmmss") & DocExt
            AttachmentFileName = folder & DocFileName
            flUpMobileAttachment.SaveAs(AttachmentFileName)
            MobileBenefit.MobileAttachment = DocFileName

        Else
            MobileBenefit.MobileAttachment = ""
        End If

        If chkMobileInsuranceRequired.Checked = True Then
            MobileBenefit.IsInsuranceRequired = True
        Else
            MobileBenefit.IsInsuranceRequired = False
        End If

        MobileBenefit.EntryBy = Session("LoginUserID")

        If MobileBenefit.MobileBenefitID = "" Then
            Dim Check As Integer = MobileBenefitData.fnInsertMobileBenefit(MobileBenefit)

            If Check = 1 Then
                MessageBox("Inserted Successfully.")
                ClearAddMobile()
                ShowExistingMobile(ToWhomProShow)
            Else
                MessageBox("Error Found.")
            End If
        Else
            Dim Check As Integer = MobileBenefitData.fnUpdateMobileBenefit(MobileBenefit)

            If Check = 1 Then
                MessageBox("Updated Successfully.")
                ShowExistingMobile(ToWhomProShow)
            Else
                MessageBox("Error Found.")
            End If
        End If
    End Sub

    Protected Sub ShowExistingMobile(ByVal EmployeeID As String)
        grdExistingMobile.DataSource = MobileBenefitData.fnShowExisingMobileByEmpID(EmployeeID)
        grdExistingMobile.DataBind()
    End Sub

    Protected Sub btnCancel_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnCancel.Click
        ClearAddMobile()
    End Sub

    Private Sub MessageBox(ByVal strMsg As String)
        Dim lbl As New System.Web.UI.WebControls.Label
        lbl.Text = "<script language='javascript'>" & Environment.NewLine _
                   & "window.alert(" & "'" & strMsg & "'" & ")</script>"
        Page.Controls.Add(lbl)
    End Sub

    Protected Sub ClearAddMobile()
        txtIMEINo.Text = ""
        txtModelNo.Text = ""
        txtSIMNo.Text = ""
        txtMobileSetReimDate.Text = ""
        drpMobileBrand.SelectedIndex = 0
        txtMobileCost.Text = ""
        txtDateOfPurchase.Text = ""
        txtRemarksForMobile.Text = ""
        chkMobileInsuranceRequired.Checked = False
    End Sub

    Protected Sub grdExistingMobile_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles grdExistingMobile.SelectedIndexChanged
        Dim lblMobileBenefitID, lblIsAmortized As Label
        Dim MobileBenefit As New clsMobileBenefit()

        Try
            lblMobileBenefitID = grdExistingMobile.SelectedRow.FindControl("lblMobileBenefitID")
            hdFldMobileBenefitID.Value = lblMobileBenefitID.Text

            lblIsAmortized = grdExistingMobile.SelectedRow.FindControl("lblIsAmortized")

            If lblIsAmortized.Text = "True" Then
                pnlMakeMobileSchedule.Visible = False
                pnlFinalizeMobileSchedule.Visible = False
                GetAmortizationInfoByBenefitID(lblMobileBenefitID.Text)
            Else
                pnlMakeMobileSchedule.Visible = True
                pnlFinalizeMobileSchedule.Visible = True
                grdMobileSchedule.DataSource = ""
                grdMobileSchedule.DataBind()
            End If

            MobileBenefit.MobileBenefitID = hdFldMobileBenefitID.Value

            MobileBenefit = MobileBenefitData.fnShowMobileBenefitByID(MobileBenefit)

            txtIMEINo.Text = MobileBenefit.IMEINo
            drpMobileBrand.SelectedValue = MobileBenefit.Brand
            txtModelNo.Text = MobileBenefit.ModelNo
            txtMobileCost.Text = MobileBenefit.MobileCost
            txtSIMNo.Text = MobileBenefit.SIMNo
            txtDateOfPurchase.Text = MobileBenefit.DateOfPurchse
            If MobileBenefit.DateOfReimbursement = "1/1/1900" Then
                txtMobileSetReimDate.Text = ""
            Else
                txtMobileSetReimDate.Text = MobileBenefit.DateOfReimbursement
            End If
            txtRemarksForMobile.Text = MobileBenefit.RemarksOnMobile
            lnkBtnMobileAttachment.PostBackUrl = "~/Attachment/" + MobileBenefit.MobileAttachment

            If MobileBenefit.IsInsuranceRequired = True Then
                chkMobileInsuranceRequired.Checked = True
            Else
                MobileBenefit.IsInsuranceRequired = False
            End If

            ShowExistingInsurance(hdFldMobileBenefitID.Value)
        Catch ex As Exception
            MessageBox(ex.Message)
        End Try
    End Sub

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        If Not IsPostBack Then
            Dim ToWhomProShow As String = Session("ToWhomProShow")
            ShowExistingMobile(ToWhomProShow)
            ShowAbatementRatio()
            getBasicProfileInfo(ToWhomProShow)

            Dim dtAbatement As DataTable = New DataTable()
            dtAbatement = FormatAbatementTable()

            dtAbatement = AbatementRaioData.fnShowAbatementRatio().Tables(0)
            Session("Abatement") = dtAbatement
        End If
    End Sub

    Protected Sub btnAddInsurance_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnAddInsurance.Click
        Dim folder As String
        Dim DocFileName As String = ""
        Dim DocFileNameSign As String = ""
        Dim DocExt As String = ""
        Dim AttachmentFileName As String = ""
        Dim DocPrefix As String
        Dim FileSize As Integer
        Dim ToWhomProShow As String = Session("ToWhomProShow")
        Dim InsuranceInfo As New clsInsuranceInfo()

        InsuranceInfo.EmployeeID = ToWhomProShow
        InsuranceInfo.BenefitID = hdFldMobileBenefitID.Value
        If InsuranceInfo.BenefitID = "" Then
            MessageBox("Please Select the Mobile to Make Insurance")
            Exit Sub
        End If
        InsuranceInfo.BenefitType = "Mobile"
        InsuranceInfo.InsuranceType = drpInsuranceType.SelectedValue
        InsuranceInfo.InsuranceWith = txtInsuranceWith.Text
        InsuranceInfo.InsuredValue = txtInsuranceValue.Text
        InsuranceInfo.InsuranceNo = txtInsuranceNo.Text

        If Trim(txtInsuranceStartDate.Text) = "" Then
            InsuranceInfo.InsuranceStartDate = "1/1/1900"
        Else
            InsuranceInfo.InsuranceStartDate = Convert.ToDateTime(txtInsuranceStartDate.Text)
        End If

        If txtInsuranceRenewalDate.Text = "" Then
            InsuranceInfo.InsuranceRenewalDate = "1/1/1900"
        Else
            InsuranceInfo.InsuranceRenewalDate = Convert.ToDateTime(txtInsuranceRenewalDate.Text)
        End If

        folder = Server.MapPath("~/Attachments/")

        If flUpInsurance.HasFile Then

            FileSize = flUpInsurance.PostedFile.ContentLength()

            If FileSize > 10485760 Then
                MessageBox("File size should be within 10MB")
                Exit Sub
            End If

            DocPrefix = Title.Replace(" ", "")
            DocExt = System.IO.Path.GetExtension(flUpInsurance.FileName)
            DocFileName = "Mobile_Insur" & "_" & DateTime.Now.ToString("ddMMyyHHmmss") & DocExt
            AttachmentFileName = folder & DocFileName
            flUpInsurance.SaveAs(AttachmentFileName)
            InsuranceInfo.InsuranceAttachment = DocFileName

        Else
            InsuranceInfo.InsuranceAttachment = ""
        End If


        InsuranceInfo.EntryBy = Session("LoginUserID")

        Dim Check As Integer = InsuranceInfoData.fnInsertInsuranceInfo(InsuranceInfo)

        If Check = 1 Then
            MessageBox("Inserted Successfully.")
            ClearInsuranceInfo()
            ShowExistingInsurance(hdFldMobileBenefitID.Value)
        Else
            MessageBox("Error Found.")
        End If
  
    End Sub

    Protected Sub ClearInsuranceInfo()
        drpInsuranceType.SelectedIndex = 0
        txtInsuranceWith.Text = ""
        txtInsuranceValue.Text = ""
        txtInsuranceNo.Text = ""
        txtInsuranceStartDate.Text = ""
        txtInsuranceRenewalDate.Text = ""
    End Sub

    Protected Sub ShowExistingInsurance(ByVal BenefitID As String)
        grdInsuranceInfo.DataSource = InsuranceInfoData.fnShowExisingInsuranceByBenefitID(BenefitID)
        grdInsuranceInfo.DataBind()
    End Sub

    Protected Sub ShowAbatementRatio()
        grdMobileAbatement.DataSource = AbatementRaioData.fnShowAbatementRatio()
        grdMobileAbatement.DataBind()
    End Sub

    Protected Function FormatAbatementTable() As DataTable
        Dim dt As DataTable = New DataTable()
        dt.Columns.Add("AbatementMonth", System.Type.GetType("System.Decimal"))
        dt.Columns.Add("RateOfAbatement", System.Type.GetType("System.Double"))
        Return dt
    End Function

    Protected Function MakeSchedule(ByVal LoanAmount As Double, ByVal AmortizationStartDate As DateTime, ByVal InterestRate As Double, ByVal DepreciationYear As Integer, ByVal IsAbatementApplicable As Boolean) As DataTable
        Dim dtVehicleSchedule As DataTable = New DataTable()
        dtVehicleSchedule = FormatAmortizationTable()

        Dim TotalAbatementPercentage As Double = 0
        Dim PaymentAmount, PrincipalPayment, InterestPayment, Abatement, URPA, DisbursedAmount, URPAL As Double
        PaymentAmount = 0
        PrincipalPayment = 0
        InterestPayment = 0
        Abatement = 0
        URPA = 0
        URPAL = 0
        DisbursedAmount = 0

        Dim dtAbatement As DataTable = New DataTable()
        dtAbatement = Session("Abatement")
        URPA = LoanAmount
        DisbursedAmount = LoanAmount

        If IsAbatementApplicable = True Then

            For Each rw As DataRow In dtAbatement.Rows
                If Convert.ToInt32(rw.Item("AbatementMonth")) <= DepreciationYear * 12 Then
                    TotalAbatementPercentage += rw.Item("RateOfAbatement")
                End If
            Next
            LoanAmount = LoanAmount - (LoanAmount * TotalAbatementPercentage * 0.01)
            URPAL = LoanAmount
            For i As Integer = 1 To DepreciationYear * 12
                Dim dr As DataRow
                dr = dtVehicleSchedule.NewRow()
                AmortizationStartDate = AmortizationStartDate.AddMonths(1)
                dr("PaymentDate") = AmortizationStartDate

                PaymentAmount = Pmt((InterestRate / 12) * 0.01, DepreciationYear * 12, -LoanAmount, 0, DueDate.EndOfPeriod)
                dr("PaymentAmount") = Math.Round(PaymentAmount, 2)

                InterestPayment = URPAL * ((InterestRate * 0.01) / 12)
                dr("InterestPayment") = Math.Round(InterestPayment, 2)

                PrincipalPayment = PaymentAmount - InterestPayment
                dr("PrincipalPayment") = Math.Round(PrincipalPayment, 2)

                If i Mod 12 = 0 Then
                    For Each rw As DataRow In dtAbatement.Rows
                        If rw.Item("AbatementMonth") = i Then
                            dr("Abatement") = Math.Round(Convert.ToDouble(rw.Item("RateOfAbatement")) * 0.01 * DisbursedAmount, 2)
                            Abatement = Math.Round(Convert.ToDouble(rw.Item("RateOfAbatement")) * 0.01 * DisbursedAmount, 2)
                        End If
                    Next

                Else
                    dr("Abatement") = 0
                    Abatement = 0
                End If

                URPA = URPA - PrincipalPayment - Abatement
                dr("URPA") = Math.Round(URPA, 2)
                URPAL = URPAL - PrincipalPayment
                dtVehicleSchedule.Rows.Add(dr)
                dtVehicleSchedule.AcceptChanges()

            Next

        Else '' EMI

            If chkIsLinearAmortization.Checked = True Then
                URPAL = LoanAmount
                LoanAmount = LoanAmount + ((LoanAmount * InterestRate * 0.01) * DepreciationYear)
                PaymentAmount = LoanAmount / (DepreciationYear * 12)

                For i As Integer = 1 To DepreciationYear * 12
                    Dim dr As DataRow
                    dr = dtVehicleSchedule.NewRow()
                    AmortizationStartDate = AmortizationStartDate.AddMonths(1)
                    dr("PaymentDate") = AmortizationStartDate

                    dr("PaymentAmount") = Math.Round(PaymentAmount, 2)

                    PrincipalPayment = URPAL / (DepreciationYear * 12)
                    dr("PrincipalPayment") = Math.Round(PrincipalPayment, 2)

                    InterestPayment = PaymentAmount - PrincipalPayment
                    dr("InterestPayment") = Math.Round(InterestPayment, 2)


                    dr("Abatement") = 0

                    URPA = URPA - PrincipalPayment
                    dr("URPA") = Math.Round(URPA, 2)

                    dtVehicleSchedule.Rows.Add(dr)
                    dtVehicleSchedule.AcceptChanges()

                Next

            Else
                PaymentAmount = Pmt((InterestRate * 0.01) / 12, DepreciationYear * 12, -LoanAmount, 0, DueDate.EndOfPeriod)

                For i As Integer = 1 To DepreciationYear * 12
                    Dim dr As DataRow
                    dr = dtVehicleSchedule.NewRow()
                    AmortizationStartDate = AmortizationStartDate.AddMonths(1)
                    dr("PaymentDate") = AmortizationStartDate

                    dr("PaymentAmount") = Math.Round(PaymentAmount, 2)

                    InterestPayment = URPA * ((InterestRate * 0.01) / 12)
                    dr("InterestPayment") = Math.Round(InterestPayment, 2)

                    PrincipalPayment = PaymentAmount - InterestPayment
                    dr("PrincipalPayment") = Math.Round(PrincipalPayment, 2)

                    dr("Abatement") = 0

                    URPA = URPA - PrincipalPayment
                    dr("URPA") = Math.Round(URPA, 2)

                    dtVehicleSchedule.Rows.Add(dr)
                    dtVehicleSchedule.AcceptChanges()

                Next
            End If

        End If

        Return dtVehicleSchedule

    End Function

    Protected Sub GetAmortizationInfoByBenefitID(ByVal BenefitID As String)
        grdMobileSchedule.DataSource = AmortizationData.fnGetAmortizationByBenefitID(BenefitID)
        grdMobileSchedule.DataBind()
    End Sub

    Protected Sub chkIsAbatementApplicable_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkIsAbatementApplicable.CheckedChanged

        If chkIsAbatementApplicable.Checked = True Then
            grdMobileAbatement.Visible = True
        Else
            grdMobileAbatement.Visible = False
        End If

    End Sub

    Protected Sub btnMakeMobileSchedule_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnMakeMobileSchedule.Click

        Session("VehicleSchedule") = ""

        Dim dtVehicleSchedule As DataTable = New DataTable()
        dtVehicleSchedule = FormatAmortizationTable()

        Dim IsAbatementApplicable As Boolean

        If chkIsAbatementApplicable.Checked = True Then
            IsAbatementApplicable = True
        Else
            IsAbatementApplicable = False
        End If
        dtVehicleSchedule = MakeSchedule(Convert.ToDouble(txtMobileLoanAmntSch.Text), Convert.ToDateTime(txtMobileAmortizationStartDate.Text), Convert.ToDouble(txtMobileIntRate.Text), Convert.ToInt32(txtMobileDepreciationYear.Text), IsAbatementApplicable)
        grdMobileSchedule.DataSource = dtVehicleSchedule
        grdMobileSchedule.DataBind()

        Session("VehicleSchedule") = dtVehicleSchedule

        btnFinalizeMobileAmortization.Enabled = True

    End Sub

    Protected Sub grdMobileSchedule_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles grdMobileSchedule.RowDataBound
        If e.Row.RowType = DataControlRowType.DataRow Then
            Dim lblPaymentAmount As Label = CType(e.Row.FindControl("lblPaymentAmount"), Label)
            Dim lblPrincipalPayment As Label = CType(e.Row.FindControl("lblPrincipalPayment"), Label)
            Dim lblInterestPayment As Label = CType(e.Row.FindControl("lblInterestPayment"), Label)
            Dim lblAbatement As Label = CType(e.Row.FindControl("lblAbatement"), Label)

            TotalPayment = TotalPayment + Convert.ToDouble(lblPaymentAmount.Text)
            TotalPrinciplePayment = TotalPrinciplePayment + Convert.ToDouble(lblPrincipalPayment.Text)
            TotalIntPayment = TotalIntPayment + Convert.ToDouble(lblInterestPayment.Text)
            TotalAbatement += Convert.ToDouble(lblAbatement.Text)
        End If

        If e.Row.RowType = DataControlRowType.Footer Then
            e.Row.Cells(2).Text = String.Format("{0:n2}", Math.Round(TotalPayment, 2))
            e.Row.Cells(3).Text = String.Format("{0:n2}", Math.Round(TotalPrinciplePayment, 2))
            e.Row.Cells(4).Text = String.Format("{0:n2}", Math.Round(TotalIntPayment, 2))
            e.Row.Cells(5).Text = String.Format("{0:n2}", Math.Round(TotalAbatement, 2))
        End If
    End Sub

    Protected Sub ClearAmortizationInfo()
        txtMobileIntRate.Text = ""
        txtMobileLoanAmntSch.Text = ""
        txtMobileAmortizationStartDate.Text = ""
        txtMobileDepreciationYear.Text = ""

        chkIsAbatementApplicable.Checked = False
        chkIsAdjustableFromSalary.Checked = False
        chkIsDepreciatePmntAutomatically.Checked = False

        grdMobileSchedule.DataSource = ""
        grdMobileSchedule.DataBind()

        btnFinalizeMobileAmortization.Enabled = False
    End Sub

    Protected Sub btnCancelVehicleAmortization_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnCancelMobileAmortization.Click
        ClearAmortizationInfo()
    End Sub

    Protected Sub btnFinalizeMobileAmortization_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnFinalizeMobileAmortization.Click

        Dim Amortization As String = ""
        Dim EmpLoan As New clsEmpLoanAccount()
        Dim ToWhomProShow As String = Session("ToWhomProShow")

        Dim dtVehicleSchedule As DataTable = New DataTable()
        dtVehicleSchedule = FormatAmortizationTable()
        If hdFldMobileBenefitID.Value = "" Then
            MessageBox("Select Benefit from the List")
            Exit Sub
        End If
        EmpLoan.EmployeeID = ToWhomProShow
        EmpLoan.BenefitID = hdFldMobileBenefitID.Value
        EmpLoan.BenefitType = "Mobile"
        EmpLoan.LoanAmount = Convert.ToDouble(txtMobileLoanAmntSch.Text)
        EmpLoan.Tenure = Convert.ToInt32(txtMobileDepreciationYear.Text) * 12
        EmpLoan.InterestRate = Convert.ToDouble(txtMobileIntRate.Text)
        EmpLoan.ReimbursementDate = Convert.ToDateTime(txtMobileAmortizationStartDate.Text)

        If chkIsAdjustableFromSalary.Checked = True Then
            EmpLoan.IsAdjustableFromSalary = True
        Else
            EmpLoan.IsAdjustableFromSalary = False
        End If

        If chkIsAbatementApplicable.Checked = True Then
            EmpLoan.IsAbatementApplicable = True
        Else
            EmpLoan.IsAbatementApplicable = False
        End If

        If chkIsDepreciatePmntAutomatically.Checked = True Then
            EmpLoan.IsDepreciatedAutomatically = True
        Else
            EmpLoan.IsDepreciatedAutomatically = False
        End If

        dtVehicleSchedule = Session("VehicleSchedule")
        For Each rw As DataRow In dtVehicleSchedule.Rows
            Amortization = Amortization & rw.Item("PaymentDate") & "~" & rw.Item("PaymentAmount") & "~" & rw.Item("PrincipalPayment") & "~" & rw.Item("InterestPayment") & "~" & rw.Item("Abatement") & "~" & rw.Item("URPA") & "~|"
        Next

        EmpLoan.LoanStatus = "Active"
        EmpLoan.Amortization = Amortization
        EmpLoan.EntryBy = Session("LoginUserID")

        Dim Check As Integer = EmpLoanData.fnInsertEmpLoanAccount(EmpLoan)

        If Check = 1 Then
            MessageBox("Successful.")
            pnlMakeMobileSchedule.Visible = False
            pnlFinalizeMobileSchedule.Visible = False
            GetAmortizationInfoByBenefitID(hdFldMobileBenefitID.Value)
        Else
            MessageBox("Error Found.")
        End If

    End Sub

    Protected Function FormatAmortizationTable() As DataTable
        Dim dt As DataTable = New DataTable()
        dt.Columns.Add("PaymentDate", System.Type.GetType("System.DateTime"))
        dt.Columns.Add("PaymentAmount", System.Type.GetType("System.Double"))
        dt.Columns.Add("PrincipalPayment", System.Type.GetType("System.Double"))
        dt.Columns.Add("InterestPayment", System.Type.GetType("System.Double"))
        dt.Columns.Add("Abatement", System.Type.GetType("System.Double"))
        dt.Columns.Add("URPA", System.Type.GetType("System.Double"))
        Return dt
    End Function

    Protected Sub chkIsAdjustableFromSalary_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkIsAdjustableFromSalary.CheckedChanged
        If chkIsAdjustableFromSalary.Checked = True Then
            chkIsDepreciatePmntAutomatically.Checked = False
            chkIsDepreciatePmntAutomatically.Enabled = False
        Else
            chkIsDepreciatePmntAutomatically.Enabled = True
        End If
    End Sub

    Protected Sub chkIsDepreciatePmntAutomatically_CheckedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles chkIsDepreciatePmntAutomatically.CheckedChanged
        If chkIsDepreciatePmntAutomatically.Checked = True Then
            chkIsAdjustableFromSalary.Checked = False
            chkIsAdjustableFromSalary.Enabled = False
        Else
            chkIsAdjustableFromSalary.Enabled = True
        End If

    End Sub

    Protected Sub getBasicProfileInfo(ByVal EmployeeId As String)
        Dim EmpBasicProfile As New EmpBasicInfo()
        EmpBasicProfile = EmployeeData.fnGetBasicProfile(EmployeeId)

        Dim pnlEmpSummary As Panel
        Master.FindControl("pnlEmpSummary")
        pnlEmpSummary = Master.FindControl("pnlEmpSummary")

        Dim lblEmployeeName, lblEmployeeID, lblOfficialDesignation, lblFunctionalDesignation, lblDepartment, lblSupervisorName, lblEmployeeType, lblServiceLength, lblLocation As Label
        Dim imgEmployee As Image
        Dim hpLnkCanProfile As New HyperLink

        lblEmployeeName = pnlEmpSummary.FindControl("lblEmployeeName")
        lblEmployeeID = pnlEmpSummary.FindControl("lblEmployeeID")
        lblOfficialDesignation = pnlEmpSummary.FindControl("lblOfficialDesignation")
        lblFunctionalDesignation = pnlEmpSummary.FindControl("lblFunctionalDesignation")
        lblDepartment = pnlEmpSummary.FindControl("lblDepartment")
        lblSupervisorName = pnlEmpSummary.FindControl("lblSupervisorName")
        lblEmployeeType = pnlEmpSummary.FindControl("lblEmployeeType")
        lblServiceLength = pnlEmpSummary.FindControl("lblServiceLength")
        lblLocation = pnlEmpSummary.FindControl("lblLocation")
        imgEmployee = pnlEmpSummary.FindControl("imgEmployee")
        hpLnkCanProfile = pnlEmpSummary.FindControl("hpLnkCanProfile")

        lblEmployeeName.Text = EmpBasicProfile.Name
        lblEmployeeID.Text = EmpBasicProfile.EmpCode
        lblOfficialDesignation.Text = EmpBasicProfile.OfficialDesignation
        lblFunctionalDesignation.Text = EmpBasicProfile.FunctionalDesignation
        lblDepartment.Text = EmpBasicProfile.DepartmentName
        lblSupervisorName.Text = EmpBasicProfile.CurrentSupervisor
        lblEmployeeType.Text = EmpBasicProfile.EmployeeTypeName
        lblServiceLength.Text = EmpBasicProfile.ServiceLength
        lblLocation.Text = EmpBasicProfile.ULCBranchName
        hpLnkCanProfile.NavigateUrl = "../RecuitmentCVView.aspx?CandidateID=" + EmpBasicProfile.CandidateID

        imgEmployee.ImageUrl = "~/Attachments/" + EmpBasicProfile.Attachment

        'lblImg.Text = imgEmployee.ImageUrl
    End Sub


End Class
